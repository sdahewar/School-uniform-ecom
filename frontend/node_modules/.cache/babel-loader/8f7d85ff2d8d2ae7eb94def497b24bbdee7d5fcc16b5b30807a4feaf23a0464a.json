{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dahew\\\\Desktop\\\\ecom gig\\\\E-commerce\\\\frontend\\\\src\\\\Context\\\\ShopContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShopContext = /*#__PURE__*/createContext(null);\n\n// //initialising the cart with zeroes\n// const getDefaultCart = () => {\n//   let cart = {};\n//   for (let index = 0; index < 300; index++) {\n//     cart[index] = 0;\n//   }\n//   return cart;\n// };\n\nconst ShopContextProvider = props => {\n  _s();\n  const [all_product, setAll_Product] = useState([]);\n\n  // //initialising the cart with zeroes\n  // const getDefaultCart = () => {\n  //   let cart = {};\n  //   for (let index = 0; index < 300; index++) {\n  //     cart[index] = 0;\n  //   }\n  //   return cart;\n  // };\n\n  //fetching data from the database onto the products section\n  // useEffect(() => {\n  //   fetch(\"http://localhost:4000/allproducts\")\n  //     .then((res) => res.json())\n  //     .then((data) => setAll_Product(data));\n\n  //   if (localStorage.getItem(\"auth-token\")) {\n  //     fetch(\"http://localhost:3001/getcart\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         Accept: \"application/json\",\n  //         \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify(),\n  //     })\n  //       .then((resp) => resp.json())\n  //       .then((data) => {\n  //         setCartItems(data);\n  //       });\n  //   }\n  // }, []);\n  const [cartItems, setCartItems] = useState({});\n  useEffect(() => {\n    fetch(\"http://localhost:4000/allproducts\").then(res => res.json()).then(data => setAll_Product(data));\n    //Fetch cart data from the backend\n    if (localStorage.getItem(\"auth-token\")) {\n      fetch(\"http://localhost:3001/getcart\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify()\n      }).then(resp => resp.json()).then(data => {\n        // Ensure data is an array and then set the cartItems state\n        if (Array.isArray(data.cart)) {\n          setCartItems(data);\n        } else {\n          console.error(\"Invalid cart data format:\", data);\n          setCartItems(data);\n          console.log(cartItems);\n        }\n      }).catch(error => {\n        console.error(\"Error fetching cart data:\", error);\n      });\n    }\n  }, []);\n\n  //add to cart\n  //add to cart\n  // const addToCart = () => {\n  //   if (localStorage.getItem(\"auth-token\")) {\n  //     fetch(\"http://localhost:4002/addtocart\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         \"auth-token\": localStorage.getItem(\"auth-token\"),\n  //       },\n  //       body: JSON.stringify({ itemId: \"1\" }), // Pass itemId as \"1\" and itemSize as \"M\"\n  //     })\n  //       .then((resp) => resp.json())\n  //       .then((data) => {\n  //         console.log(data);\n  //       })\n  //       .catch((error) => {\n  //         console.error(\"Error adding product to cart:\", error);\n  //       });\n  //   }\n  // };\n\n  // const addToCart = (productId, selectedSize) => {\n  //   if (localStorage.getItem(\"auth-token\")) {\n  //     fetch(\"http://localhost:4002/addtocart\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         \"auth-token\": localStorage.getItem(\"auth-token\"),\n  //       },\n  //       body: JSON.stringify({ itemId: productId, itemSize: selectedSize }),\n  //     })\n  //       .then((resp) => resp.json())\n  //       .then((data) => {\n  //         console.log(data);\n  //       })\n  //       .catch((error) => {\n  //         console.error(\"Error adding product to cart:\", error);\n  //       });\n  //   }\n  // };\n\n  const addToCart = (productId, selectedSize) => {\n    if (localStorage.getItem(\"auth-token\")) {\n      axios.post(\"http://localhost:3001/addtocart\", {\n        productId,\n        selectedSize\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"auth-token\")\n        }\n      }).then(response => {\n        console.log(response.data);\n      }).catch(error => {\n        console.error(\"Error adding product to cart:\", error);\n      });\n    }\n  };\n\n  //remove from cart\n  // const removeFromCart = (itemId) => {\n  //   setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n  //   if (localStorage.getItem(\"auth-token\")) {\n  //     fetch(\"http://localhost:4000/removefromcart\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         Accept: \"application/form-data\",\n  //         \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({ itemId: itemId }),\n  //     })\n  //       .then((resp) => resp.json())\n  //       .then((data) => {\n  //         console.log(data);\n  //       });\n  //   }\n  // };\n  //remove from cart\n  const removeFromCart = productIdToRemove => {\n    if (localStorage.getItem(\"auth-token\")) {\n      axios.post(\"http://localhost:3001/removefromcart\", {\n        productId: productIdToRemove\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"auth-token\")\n        }\n      }).then(response => {\n        // Update cartItems state by filtering out the removed item\n        setCartItems(prevCartItems => prevCartItems.filter(item => item.productId !== productIdToRemove));\n        console.log(response.data);\n      }).catch(error => {\n        console.error(\"Error removing product from cart:\", error);\n      });\n    }\n  };\n\n  //get total cart amount\n  const getTotalCartAmount = () => {\n    let totalAmount = 0;\n    for (const item in cartItems) {\n      if (cartItems[item] > 0) {\n        let itemInfo = all_product.find(product => product.id === Number(item));\n        totalAmount += cartItems[item] * itemInfo.new_price;\n      }\n    }\n    return totalAmount;\n  };\n\n  //get total cart items\n  const getTotalCartItems = () => {\n    let totalItem = 0;\n    // Convert cartItems object to an array of values\n    const cartItemsArray = Object.values(cartItems);\n    console.log(`the cart is ${cartItems}`);\n    // Iterate over each item in the cartItems array\n    cartItemsArray.forEach(item => {\n      // Add the quantity of each item to the totalItem count\n      totalItem++;\n    });\n    console.log(totalItem);\n    return totalItem;\n  };\n  const contextValue = {\n    getTotalCartItems,\n    getTotalCartAmount,\n    all_product,\n    cartItems,\n    addToCart,\n    removeFromCart\n  };\n  return /*#__PURE__*/_jsxDEV(ShopContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(ShopContextProvider, \"9DORaaaqBQKAuooA2SGpX1l+LXo=\");\n_c = ShopContextProvider;\nexport default ShopContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ShopContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","axios","jsxDEV","_jsxDEV","ShopContext","ShopContextProvider","props","_s","all_product","setAll_Product","cartItems","setCartItems","fetch","then","res","json","data","localStorage","getItem","method","headers","Accept","body","JSON","stringify","resp","Array","isArray","cart","console","error","log","catch","addToCart","productId","selectedSize","post","response","removeFromCart","productIdToRemove","prevCartItems","filter","item","getTotalCartAmount","totalAmount","itemInfo","find","product","id","Number","new_price","getTotalCartItems","totalItem","cartItemsArray","Object","values","forEach","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dahew/Desktop/ecom gig/E-commerce/frontend/src/Context/ShopContext.jsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\n// //initialising the cart with zeroes\r\n// const getDefaultCart = () => {\r\n//   let cart = {};\r\n//   for (let index = 0; index < 300; index++) {\r\n//     cart[index] = 0;\r\n//   }\r\n//   return cart;\r\n// };\r\n\r\nconst ShopContextProvider = (props) => {\r\n  const [all_product, setAll_Product] = useState([]);\r\n\r\n  // //initialising the cart with zeroes\r\n  // const getDefaultCart = () => {\r\n  //   let cart = {};\r\n  //   for (let index = 0; index < 300; index++) {\r\n  //     cart[index] = 0;\r\n  //   }\r\n  //   return cart;\r\n  // };\r\n\r\n  //fetching data from the database onto the products section\r\n  // useEffect(() => {\r\n  //   fetch(\"http://localhost:4000/allproducts\")\r\n  //     .then((res) => res.json())\r\n  //     .then((data) => setAll_Product(data));\r\n\r\n  //   if (localStorage.getItem(\"auth-token\")) {\r\n  //     fetch(\"http://localhost:3001/getcart\", {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         Accept: \"application/json\",\r\n  //         \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //       body: JSON.stringify(),\r\n  //     })\r\n  //       .then((resp) => resp.json())\r\n  //       .then((data) => {\r\n  //         setCartItems(data);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n  const [cartItems, setCartItems] = useState({});\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:4000/allproducts\")\r\n      .then((res) => res.json())\r\n      .then((data) => setAll_Product(data));\r\n    //Fetch cart data from the backend\r\n    if (localStorage.getItem(\"auth-token\")) {\r\n      fetch(\"http://localhost:3001/getcart\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(),\r\n      })\r\n        .then((resp) => resp.json())\r\n        .then((data) => {\r\n          // Ensure data is an array and then set the cartItems state\r\n          if (Array.isArray(data.cart)) {\r\n            setCartItems(data);\r\n          } else {\r\n            console.error(\"Invalid cart data format:\", data);\r\n            setCartItems(data);\r\n            console.log(cartItems);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching cart data:\", error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  //add to cart\r\n  //add to cart\r\n  // const addToCart = () => {\r\n  //   if (localStorage.getItem(\"auth-token\")) {\r\n  //     fetch(\"http://localhost:4002/addtocart\", {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         \"auth-token\": localStorage.getItem(\"auth-token\"),\r\n  //       },\r\n  //       body: JSON.stringify({ itemId: \"1\" }), // Pass itemId as \"1\" and itemSize as \"M\"\r\n  //     })\r\n  //       .then((resp) => resp.json())\r\n  //       .then((data) => {\r\n  //         console.log(data);\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error(\"Error adding product to cart:\", error);\r\n  //       });\r\n  //   }\r\n  // };\r\n\r\n  // const addToCart = (productId, selectedSize) => {\r\n  //   if (localStorage.getItem(\"auth-token\")) {\r\n  //     fetch(\"http://localhost:4002/addtocart\", {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         \"auth-token\": localStorage.getItem(\"auth-token\"),\r\n  //       },\r\n  //       body: JSON.stringify({ itemId: productId, itemSize: selectedSize }),\r\n  //     })\r\n  //       .then((resp) => resp.json())\r\n  //       .then((data) => {\r\n  //         console.log(data);\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.error(\"Error adding product to cart:\", error);\r\n  //       });\r\n  //   }\r\n  // };\r\n\r\n  const addToCart = (productId, selectedSize) => {\r\n    if (localStorage.getItem(\"auth-token\")) {\r\n      axios\r\n        .post(\r\n          \"http://localhost:3001/addtocart\",\r\n          {\r\n            productId,\r\n            selectedSize,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"auth-token\": localStorage.getItem(\"auth-token\"),\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          console.log(response.data);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error adding product to cart:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  //remove from cart\r\n  // const removeFromCart = (itemId) => {\r\n  //   setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\r\n  //   if (localStorage.getItem(\"auth-token\")) {\r\n  //     fetch(\"http://localhost:4000/removefromcart\", {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         Accept: \"application/form-data\",\r\n  //         \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //       body: JSON.stringify({ itemId: itemId }),\r\n  //     })\r\n  //       .then((resp) => resp.json())\r\n  //       .then((data) => {\r\n  //         console.log(data);\r\n  //       });\r\n  //   }\r\n  // };\r\n  //remove from cart\r\n  const removeFromCart = (productIdToRemove) => {\r\n    if (localStorage.getItem(\"auth-token\")) {\r\n      axios\r\n        .post(\r\n          \"http://localhost:3001/removefromcart\",\r\n          {\r\n            productId: productIdToRemove,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"auth-token\": localStorage.getItem(\"auth-token\"),\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // Update cartItems state by filtering out the removed item\r\n          setCartItems((prevCartItems) =>\r\n            prevCartItems.filter((item) => item.productId !== productIdToRemove)\r\n          );\r\n          console.log(response.data);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error removing product from cart:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  //get total cart amount\r\n  const getTotalCartAmount = () => {\r\n    let totalAmount = 0;\r\n    for (const item in cartItems) {\r\n      if (cartItems[item] > 0) {\r\n        let itemInfo = all_product.find(\r\n          (product) => product.id === Number(item)\r\n        );\r\n        totalAmount += cartItems[item] * itemInfo.new_price;\r\n      }\r\n    }\r\n    return totalAmount;\r\n  };\r\n\r\n  //get total cart items\r\n  const getTotalCartItems = () => {\r\n    let totalItem = 0;\r\n    // Convert cartItems object to an array of values\r\n    const cartItemsArray = Object.values(cartItems);\r\n    console.log(`the cart is ${cartItems}`);\r\n    // Iterate over each item in the cartItems array\r\n    cartItemsArray.forEach((item) => {\r\n      // Add the quantity of each item to the totalItem count\r\n      totalItem++;\r\n    });\r\n    console.log(totalItem);\r\n    return totalItem;\r\n  };\r\n\r\n  const contextValue = {\r\n    getTotalCartItems,\r\n    getTotalCartAmount,\r\n    all_product,\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n  };\r\n  return (\r\n    <ShopContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </ShopContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ShopContextProvider;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMO,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9CD,SAAS,CAAC,MAAM;IACda,KAAK,CAAC,mCAAmC,CAAC,CACvCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKP,cAAc,CAACO,IAAI,CAAC,CAAC;IACvC;IACA,IAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,EAAE;MACtCN,KAAK,CAAC,+BAA+B,EAAE;QACrCO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPC,MAAM,EAAE,kBAAkB;UAC1B,YAAY,EAAG,GAAEJ,YAAY,CAACC,OAAO,CAAC,YAAY,CAAE,EAAC;UACrD,cAAc,EAAE;QAClB,CAAC;QACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACvB,CAAC,CAAC,CACCX,IAAI,CAAEY,IAAI,IAAKA,IAAI,CAACV,IAAI,CAAC,CAAC,CAAC,CAC3BF,IAAI,CAAEG,IAAI,IAAK;QACd;QACA,IAAIU,KAAK,CAACC,OAAO,CAACX,IAAI,CAACY,IAAI,CAAC,EAAE;UAC5BjB,YAAY,CAACK,IAAI,CAAC;QACpB,CAAC,MAAM;UACLa,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEd,IAAI,CAAC;UAChDL,YAAY,CAACK,IAAI,CAAC;UAClBa,OAAO,CAACE,GAAG,CAACrB,SAAS,CAAC;QACxB;MACF,CAAC,CAAC,CACDsB,KAAK,CAAEF,KAAK,IAAK;QAChBD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMG,SAAS,GAAGA,CAACC,SAAS,EAAEC,YAAY,KAAK;IAC7C,IAAIlB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,EAAE;MACtCjB,KAAK,CACFmC,IAAI,CACH,iCAAiC,EACjC;QACEF,SAAS;QACTC;MACF,CAAC,EACD;QACEf,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEH,YAAY,CAACC,OAAO,CAAC,YAAY;QACjD;MACF,CACF,CAAC,CACAL,IAAI,CAAEwB,QAAQ,IAAK;QAClBR,OAAO,CAACE,GAAG,CAACM,QAAQ,CAACrB,IAAI,CAAC;MAC5B,CAAC,CAAC,CACDgB,KAAK,CAAEF,KAAK,IAAK;QAChBD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD,CAAC,CAAC;IACN;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMQ,cAAc,GAAIC,iBAAiB,IAAK;IAC5C,IAAItB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,EAAE;MACtCjB,KAAK,CACFmC,IAAI,CACH,sCAAsC,EACtC;QACEF,SAAS,EAAEK;MACb,CAAC,EACD;QACEnB,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEH,YAAY,CAACC,OAAO,CAAC,YAAY;QACjD;MACF,CACF,CAAC,CACAL,IAAI,CAAEwB,QAAQ,IAAK;QAClB;QACA1B,YAAY,CAAE6B,aAAa,IACzBA,aAAa,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACR,SAAS,KAAKK,iBAAiB,CACrE,CAAC;QACDV,OAAO,CAACE,GAAG,CAACM,QAAQ,CAACrB,IAAI,CAAC;MAC5B,CAAC,CAAC,CACDgB,KAAK,CAAEF,KAAK,IAAK;QAChBD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D,CAAC,CAAC;IACN;EACF,CAAC;;EAED;EACA,MAAMa,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIC,WAAW,GAAG,CAAC;IACnB,KAAK,MAAMF,IAAI,IAAIhC,SAAS,EAAE;MAC5B,IAAIA,SAAS,CAACgC,IAAI,CAAC,GAAG,CAAC,EAAE;QACvB,IAAIG,QAAQ,GAAGrC,WAAW,CAACsC,IAAI,CAC5BC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKC,MAAM,CAACP,IAAI,CACzC,CAAC;QACDE,WAAW,IAAIlC,SAAS,CAACgC,IAAI,CAAC,GAAGG,QAAQ,CAACK,SAAS;MACrD;IACF;IACA,OAAON,WAAW;EACpB,CAAC;;EAED;EACA,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIC,SAAS,GAAG,CAAC;IACjB;IACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,MAAM,CAAC7C,SAAS,CAAC;IAC/CmB,OAAO,CAACE,GAAG,CAAE,eAAcrB,SAAU,EAAC,CAAC;IACvC;IACA2C,cAAc,CAACG,OAAO,CAAEd,IAAI,IAAK;MAC/B;MACAU,SAAS,EAAE;IACb,CAAC,CAAC;IACFvB,OAAO,CAACE,GAAG,CAACqB,SAAS,CAAC;IACtB,OAAOA,SAAS;EAClB,CAAC;EAED,MAAMK,YAAY,GAAG;IACnBN,iBAAiB;IACjBR,kBAAkB;IAClBnC,WAAW;IACXE,SAAS;IACTuB,SAAS;IACTK;EACF,CAAC;EACD,oBACEnC,OAAA,CAACC,WAAW,CAACsD,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAG,QAAA,EACvCtD,KAAK,CAACsD;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAACzD,EAAA,CAhOIF,mBAAmB;AAAA4D,EAAA,GAAnB5D,mBAAmB;AAkOzB,eAAeA,mBAAmB;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}